[{"categories":["糖尿病"],"content":"01 与我相关的 时间拨回三年前，30岁生日的刚过我接到一个电话，女儿休克进医院了。也是从那一天起，知道了什么是酮症酸中毒（DKA）、什么是HbA1c、什么是一型糖尿病，诺和锐诺和灵分别是做什么用的。 接下来的一个月了解了更多与普通人一辈子也不会去了解的名词。如：C肽、HbA1c。开始去了解这个地球上最先进的糖尿病治疗方法和理念。 ","date":"2021-03-01","objectID":"/diabetes/why_i_do_it/:0:1","tags":["糖"],"title":"初衷","uri":"/diabetes/why_i_do_it/"},{"categories":["糖尿病"],"content":"02 更多的故事 一型糖尿病儿童写给中央领导人的信 ","date":"2021-03-01","objectID":"/diabetes/why_i_do_it/:0:2","tags":["糖"],"title":"初衷","uri":"/diabetes/why_i_do_it/"},{"categories":["糖尿病"],"content":"03 我要做什么 我从事IT工作多年，虽然现在科技发展日新月异。但是糖尿病的进展真的很悲观。虽然设备大的厂商如德康、美敦力、雅培，国内有三诺等，都在投入研发。但是也是各自造车,他们毕竟追求的是利润，无力或者说无意推动从根本上去解决患者面临的其他难题，数据治理平台,国外也很少有相关的开源软件或者设备。国内更是找不到一家。 所以： 整理国内外糖尿病相关开源软件，并参与相关代码 翻译国外相关做的比较好的Blog，软件中文包等 假如有能力的话推进糖尿病持续监控，主动建议等相关软件开发 ","date":"2021-03-01","objectID":"/diabetes/why_i_do_it/:0:3","tags":["糖"],"title":"初衷","uri":"/diabetes/why_i_do_it/"},{"categories":["糖尿病"],"content":"04 还能做什么 TODO ","date":"2021-03-01","objectID":"/diabetes/why_i_do_it/:0:4","tags":["糖"],"title":"初衷","uri":"/diabetes/why_i_do_it/"},{"categories":["代码"],"content":"构架图 参考官方截图 ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:1:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"部署步骤 废话就懒得说了直接上命令 ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:2:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"2. 准备工作 #### 1. 内部互通网络 docker network create --driver bridge mynet --subnet 172.20.0.0/24 --gateway 172.20.0.1 ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:2:1","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"2. 第一步创建 monitor docker run --net mynet -it -d --name pgmonitor-service \\ --ip 172.20.0.20 \\ -v /data/pgmonitor:/data/pgaf \\ -e \"PG_AUTOCTL_DEBUG=1\" \\ -e \"PGDATA=/data/pgaf\" \\ hapg:14 pg_autoctl create monitor --no-ssl --auth trust --run 运行完以后可以docker exec pgmonitor-service pg_autoctl show state命令查看是否已经启动完成 Name | Node | Host:Port | TLI: LSN | Connection | Reported State | Assigned State -----+-------+------------+-----------+--------------+---------------------+-------------------- ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:2:2","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"2. 第二步创建 主节点 docker run --net mynet -it -d --name pg1-service \\ --ip 172.20.0.30 \\ -v /data/pg1:/data \\ -e \"PG_AUTOCTL_DEBUG=1\" \\ -e \"PGDATA=/data/pgaf\" \\ hapg:14 pg_autoctl create postgres --no-ssl --auth scram-sha-256 \\ --hostname pg1-service --pg-hba-lan --username zuser --dbname zdb \\ --monitor \"postgresql://autoctl_node@pgmonitor-service/pg_auto_failover\" --run 等待完成（可以继续使用上述docker exec pgmonitor-service pg_autoctl show state查看状态命令），完成大概如下 Name | Node | Host:Port | TLI: LSN | Connection | Reported State | Assigned State -------+-------+------------------+----------------+--------------+---------------------+-------------------- node_1 | 1 | pg1-service:5432 | 1: 0/17598E0 | read-write | single | single 然后配置一下主从节点件通信密码 docker exec pg1-service pg_autoctl config set replication.password h4ckm3m0r3 注意这里有个坑，上面的官方文档命令完成以后没有真正创建密码，如果这个时候直接加载启动从节点则会出现如下报错： 08:28:05 9 INFO Reloading pg_autoctl postgres service [-1] 08:28:05 10 ERROR Connection to database failed: connection to server at \"pg1-service\" (172.20.0.30), port 5432 failed: FATAL: password authentication failed for user \"pgautofailover_replicator\" 08:28:05 10 ERROR Failed to connect to \"postgres://pgautofailover_replicator@pg1-service:5432/zdb?\" after 16 attempts in 1438 ms, pg_autoctl stops retrying now 08:28:05 10 WARN Failed to contact the primary node 1 \"node_1\" (pg1-service:5432) 08:28:06 10 WARN Failed to connect to \"postgres://pgautofailover_replicator@pg1-service:5432/zdb?\", retrying until the server is ready 08:28:06 10 ERROR Connection to database failed: connection to server at \"pg1-service\" (172.20.0.30), port 5432 failed: FATAL: password authentication failed for user \"pgautofailover_replicator\" 这里需要登录主库创建出密码 命令如下： docker exec pg1-service psql postgres -c \"alter user pgautofailover_replicator password 'h4ckm3m0r3';\" ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:3:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"第二步创建 创建从节点 docker run --net mynet -it -d --name pg2-service \\ --ip 172.20.0.40 \\ -v /data/pg2:/data \\ -e \"PG_AUTOCTL_DEBUG=1\" \\ -e \"PGPASSWORD=h4ckm3m0r3\" \\ -e \"PGDATA=/data/pgaf\" \\ hapg:14 pg_autoctl create postgres --no-ssl --auth scram-sha-256 \\ --hostname pg2-service --pg-hba-lan --username zuser --dbname zdb \\ --monitor \"postgresql://autoctl_node@pgmonitor-service/pg_auto_failover\" --run docker exec pg2-service pg_autoctl config set replication.password h4ckm3m0r3 # 这里不需要再次创建密码了因为连接成功以后会自动同步过来 ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:4:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"检查最终状态 # docker exec pgmonitor-service pg_autoctl show state Name | Node | Host:Port | TLI: LSN | Connection | Reported State | Assigned State -------+-------+------------------+----------------+--------------+---------------------+-------------------- node_1 | 1 | pg1-service:5432 | 1: 0/3337FE8 | read-write ! | primary | demote_timeout node_2 | 2 | pg2-service:5432 | 1: 0/3338078 | read-only | prepare_promotion | stop_replication ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:5:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"检查主备功能 这里我们先去另外一个地方导出数据库备份 docker exec dev-pg pg_dump -F c -f /test.dmp -C -E UTF8 -U postgres test_db docker cp dev-pg:/test.dmp ./ 导入到主数据库 # 数据库导入主节点 docker cp test.dmp pg1-service:/ docker exec dev-pg pg_restore --no-owner --role=zuser -d zdb test.dmp 登录从数据库查看,可以看到数据已经有了 chinaddos@liuyou-iMac pgtest % docker exec -it pg2-service psql postgres -d zdb docker@21c6c8007d75:/$ psql postgres psql (14.4 (Debian 14.4-1.pgdg100+1)) Type \"help\" for help. zdb=# \\dt List of relations Schema | Name | Type | Owner --------+-----------------------+-------+------- public | test111111111 | table | zuser public | test1111111112222 | table | zuser # ... 使用命令停止主库 docker stop pg1-service Name | Node | Host:Port | TLI: LSN | Connection | Reported State | Assigned State -------+-------+------------------+----------------+--------------+---------------------+-------------------- node_1 | 1 | pg1-service:5432 | 1: 0/3337FE8 | read-write ! | primary | demote_timeout node_2 | 2 | pg2-service:5432 | 2: 0/333BD10 | read-only | stop_replication | stop_replication 直接修改第二个数据库 zdb=#select*fromzw_widgets;widget_id|title|widget_type-----------+---------------+------------ 143786240|策略管理|1143786496|策略管理2|1(2rows)-- 其他命令 zdb=#updatezw_widgetssetwidget_type=2;-- 其他命令 再次启动第一个数据库，可以看到主备已经互换了 Name | Node | Host:Port | TLI: LSN | Connection | Reported State | Assigned State -------+-------+------------------+----------------+--------------+---------------------+-------------------- node_1 | 1 | pg1-service:5432 | 2: 0/5000110 | read-only | secondary | secondary node_2 | 2 | pg2-service:5432 | 2: 0/5000110 | read-write | primary | primary 检查pg1，数据库数据已经同步过来 zdb=#select*fromzw_widgets;widget_id|title|widget_type-----------+---------------+------------ 143786240|策略管理|2143786496|策略管理2|2(2rows) ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:6:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"补充 怎么调整监测时间相关参数 psql -p [port] -d pg_auto_failover # List the health_check variables SELECT name, setting FROM pg_settings WHERE name ~ 'pgautofailover\\.'; # Check status of database every 5s, setthe timeout to 2s and set the node unhealthy timeout to 5s ALTER SYSTEM SET pgautofailover.health_check_period TO 5000; ALTER SYSTEM SET pgautofailover.health_check_timeout TO 2000; ALTER SYSTEM SET pgautofailover.node_considered_unhealthy_timeout TO 5000; # Reload config: select pg_reload_conf(); pg-hba.conf 配置文件可能会有坑，需要主要自行添加数据库访问权限 ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:7:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"参考资料 https://pg-auto-failover.readthedocs.io/en/master/security.html?highlight=password#authentication-with-passwords https://cloud.tencent.com/developer/article/1663944 https://github.com/citusdata/pg_auto_failover/blob/master/docker-compose.yml ","date":"2022-08-05","objectID":"/2022/08/20220805-hapg/:8:0","tags":["docker","postgres"],"title":"Postgres 高可用部署验证","uri":"/2022/08/20220805-hapg/"},{"categories":["代码"],"content":"引 一直想找个快乐的下载电影原声配乐、和其他音乐的方式。PT网站是一种选择，但是还需要自行的去下载种子，落雪也是很好的选择，但是没法下载无损音质。其他的就更麻烦。搜来搜去SoulSeek是一个很棒的选择。 ","date":"2022-07-27","objectID":"/2022/07/20220727-soulseek/:1:0","tags":["docker","ubuntu"],"title":"Soulseek Docker的中文支持","uri":"/2022/07/20220727-soulseek/"},{"categories":["代码"],"content":"docker 版本 SoulSeekQT是提供mac，windows，linux三个平台的版本。但是为了能24小时下（分）载（享）数据。同时要将下载的数据快速的存储在nas服务器上，docker版本是一个很好的选择 github上也确实找到了一个不错的版本（https://github.com/realies/soulseek-docker）。大概命令如下： docker run -d --name soulseek --restart=unless-stopped \\ -v \"/persistent/appdata\":\"/data/.SoulseekQt\" \\ -v \"/persistent/downloads\":\"/data/Soulseek Downloads\" \\ -v \"/persistent/logs\":\"/data/Soulseek Chat Logs\" \\ -v \"/persistent/shared\":\"/data/Soulseek Shared Folder\" \\ -e PGID=1000 \\ -e PUID=1000 \\ -p 6080:6080 \\ realies/soulseek 不过有个致命的问题，不支持中文。这是一个让人恼火的问题。 ","date":"2022-07-27","objectID":"/2022/07/20220727-soulseek/:2:0","tags":["docker","ubuntu"],"title":"Soulseek Docker的中文支持","uri":"/2022/07/20220727-soulseek/"},{"categories":["代码"],"content":"解决中文问题 简单看了一下为什么不支持，是因为原来镜像包使用的是标准的ubuntu。毕竟不是国人打包的软件。 可以尝试按照如下方式重新打包： # 添加中文输入法，并设置中文FROMrealies/soulseekRUN set -eux \u0026\u0026 \\ apt-get update \u0026\u0026 \\ apt-get install -y xfonts-wqy \u0026\u0026 \\ locale-gen zh_CN.UTF-8 \u0026\u0026 \\ update-locale LANG=zh_CN.UTF-8 LANGUAGE=zh_CN.UTF-8 LC_ALL=zh_CN.UTF-8 \u0026\u0026 \\ ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \u0026\u0026 \\ find /var/lib/apt/lists -type f -delete \u0026\u0026 \\ find /var/cache -type f -deleteENV LANG=zh_CN.UTF-8 LANGUAGE=zh_CN.UTF-8 LC_ALL=zh_CN.UTF-8 重新启动，饿居然报错了，怎么回事。不慌，看看日志： root@home:/home/liuyou/soulseek-docker# docker logs soulseek 2022-07-27 05:23:47,737 INFO Set uid to user 1000 succeeded 2022-07-27 05:23:47,740 INFO supervisord started with pid 21 2022-07-27 05:23:48,743 INFO spawned: 'tigervnc' with pid 22 2022-07-27 05:23:48,745 INFO spawned: 'openbox' with pid 23 2022-07-27 05:23:48,747 INFO spawned: 'novnc' with pid 24 2022-07-27 05:23:48,749 INFO spawned: 'soulseek' with pid 25 2022-07-27 05:23:49,770 INFO success: tigervnc entered RUNNING state, process has stayed up for \u003e than 1 seconds (startsecs) 2022-07-27 05:23:49,770 INFO success: openbox entered RUNNING state, process has stayed up for \u003e than 1 seconds (startsecs) 2022-07-27 05:23:49,770 INFO success: novnc entered RUNNING state, process has stayed up for \u003e than 1 seconds (startsecs) 2022-07-27 05:23:49,770 INFO success: soulseek entered RUNNING state, process has stayed up for \u003e than 1 seconds (startsecs) 2022-07-27 05:23:49,770 INFO exited: soulseek (exit status 127; not expected) 2022-07-27 05:23:49,774 INFO spawned: 'soulseek' with pid 59 2022-07-27 05:23:50,833 INFO success: soulseek entered RUNNING state, process has stayed up for \u003e than 1 seconds (startsecs) 2022-07-27 05:23:50,833 INFO exited: soulseek (exit status 127; not expected) 不可能呀就是添加一个语音包而已。看不出什么呀，继续查看启动命令 cat init.sh [program:soulseek] user=$username environment=HOME=\"/data\",DISPLAY=\":1\",USER=\"$username\" command=/app/SoulseekQt autorestart=true 依葫芦画瓢我们收到启动试试： echo \" su soulseek export HOME=/data export DISPLAY=\":1\" export USER=soulseek /app/SoulseekQt --help \" \u003e t.sh root@81c5257a7174:/app# bash t.sh QStandardPaths: wrong ownership on runtime directory /data, 1000 instead of 0 /app/SoulseekQt: symbol lookup error: /lib/x86_64-linux-gnu/libfontconfig.so.1: undefined symbol: FT_Done_MM_Var 露出原型了吧，赶紧谷歌一把，得到两个相关的链接： https://blog.51cto.com/u_15127633/3855600 https://askubuntu.com/questions/1140921/wolfram-mathematica-after-upgrade-to-ubuntu-19-04-symbol-lookup-error-usr-lib 使用系统的libfreetype.so.6代替游戏目录中的libfreetype.so.6 饿貌似libfreetype 和报错的 libfontconfig没有直接关系吧。不管了，再次修改Dockerfile文件。 # 添加中文输入法，并设置中文FROMrealies/soulseekRUN set -eux \u0026\u0026 \\ apt-get update \u0026\u0026 \\ apt-get install -y xfonts-wqy \u0026\u0026 \\ locale-gen zh_CN.UTF-8 \u0026\u0026 \\ update-locale LANG=zh_CN.UTF-8 LANGUAGE=zh_CN.UTF-8 LC_ALL=zh_CN.UTF-8 \u0026\u0026 \\ ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \u0026\u0026 \\ mv /app/lib/libfreetype.so.6 /app/lib/libfreetype.so.6.bak \u0026\u0026 \\ find /var/lib/apt/lists -type f -delete \u0026\u0026 \\ find /var/cache -type f -deleteENV LANG=zh_CN.UTF-8 LANGUAGE=zh_CN.UTF-8 LC_ALL=zh_CN.UTF-8 最后运行启动命令： docker run -it -d --restart=unless-stopped \\ --name soulseek \\ --net home6 \\ -e PGID=1000 \\ -e PUID=1000 \\ -e XMODIFIERS=\"@im=fcitx\" \\ -e QT_IM_MODULE=\"fcitx\" \\ -e GTK_IM_MODULE=\"fcitx\" \\ -p 6080:6080 \\ -v /data/music:/data/music \\ soulseek:0.0.4 好了 这下舒服了 ","date":"2022-07-27","objectID":"/2022/07/20220727-soulseek/:3:0","tags":["docker","ubuntu"],"title":"Soulseek Docker的中文支持","uri":"/2022/07/20220727-soulseek/"},{"categories":["代码"],"content":"其他参考链接 http://www.soulseekqt.net/news/node/1 https://containerization-automation.readthedocs.io/zh_CN/latest/docker/basic/[Docker][Ubuntu%2018.04]%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/ ","date":"2022-07-27","objectID":"/2022/07/20220727-soulseek/:4:0","tags":["docker","ubuntu"],"title":"Soulseek Docker的中文支持","uri":"/2022/07/20220727-soulseek/"},{"categories":["思考","碎碎念"],"content":"引 最近在看《毛选》。然后我就发现自己的好友也在看，这是一个很奇怪的“默契”。就像自己平常说话中提到了椅子，然后打开某宝或者某乎，直接也看到了相关的商品和问答一般。感觉自己正被某种神秘的力量监视着。行业上有种说法叫“信息茧房”，就是你看到就是被人让你看到的。我自己时常都有这种怀疑。而我出现这种怀疑本身是不是也是“信息茧房”的一部分就不得而知。 ","date":"2022-07-25","objectID":"/2022/07/20220725-about-pop/:0:1","tags":["随笔"],"title":"关于流行","uri":"/2022/07/20220725-about-pop/"},{"categories":["思考","碎碎念"],"content":"流行 大学的时候，很流行风衣和格子衬衫。那年我就买了格子衬衫。这种“流行”的概念真的是一种很魔幻的概念。我记得小时候或者说高中的时候，家里（一个叫萍乡的小地方）玩麻将都是玩“将胡”模式，然后大二的时候回家，大家就开始玩“转转麻将”了。我一脸疑惑，乡里乡亲的就说现在这个流行，大家都玩这个，然后大家就抛弃了印象中从小学到大学那么长一段时间的麻将玩法。 即便是到了现在，我已经毕业十年，我询问几个族叔，是否喜欢以前的玩法，他们的答复是以前那种太S了，时间太长了。我在想难道这个也和时代有关系，大学时代玩一局游戏40分钟不算长。现在来说 20分钟的农药也觉得时间太久了。视频也要刷短视频。长视频没几个人看。 ","date":"2022-07-25","objectID":"/2022/07/20220725-about-pop/:0:2","tags":["随笔"],"title":"关于流行","uri":"/2022/07/20220725-about-pop/"},{"categories":["思考","碎碎念"],"content":"疑惑 流行的奥秘到底是什么？是什么在引导流行这真是一个难以琢磨的问题。至少对我来说，是充满疑惑的。我妻子也会在帮我选购衣服的时候说，今年流行这个款，去年的款过时了。那她一开始从哪里听到的呢。就跟河流会有源头，大树会有枝根一般，但是我却看不到“流行的源头”。难道说也有某个“流行管理局”，他们规定 今年流行玩21点、今年流行风衣、流行皮裤。 ","date":"2022-07-25","objectID":"/2022/07/20220725-about-pop/:0:3","tags":["随笔"],"title":"关于流行","uri":"/2022/07/20220725-about-pop/"},{"categories":null,"content":"01 起因 自从入了草缸这个坑以后，个人偏爱红宫廷，血心兰等“红草”。需要长期添加铁肥。迫于某宝上只要带上水族两个字的材料价格都是几十起。就在各种论坛上查询，怎么自制液肥的方法。 主要参考了 专利 CN104671921B 实例10 将以下重量份数的的原料:EDTA二钠19份、七水硫酸亚铁14份、氨基酸290份、硼酸 40份、一水硫酸锌50份、尿素200份、磷酸二氢钾60份、山梨醇30份、吐温2〇3〇份，溶于水中， 充分混匀，配成1〇〇〇重量份的溶液，即得多元复合螯合铁肥。 再参考网上配方介绍配制0.05摩尔／升螯合铁肥的具体方法：： 将1000毫升蒸馏水加热至60～70℃，精确称取乙二胺四乙酸二钠37.7克置于三角瓶中（自己搞可以随便的容器，毕竟我们不是科学实验），加人温蒸馏水600毫升左右，搅拌至全部溶化，再将其余的蒸馏水加人并搅拌均匀。 精确称取硫酸亚铁27.8克置于另一三角瓶中，加人l000毫升蒸馏水并搅拌均匀。 将以上两种溶液混合后搅拌均匀，即为0.05摩尔／升螯合铁溶液——铁肥。 备注：且记要用分析纯 ","date":"2022-04-20","objectID":"/2022/04/my_ada_first/:0:1","tags":null,"title":"草缸铁肥配方","uri":"/2022/04/my_ada_first/"},{"categories":null,"content":"再说说价格 自己在马云家买的分析纯，这两瓶分析纯价格不到20元还包邮，能用到你上岸估计一半都用不完！ ","date":"2022-04-20","objectID":"/2022/04/my_ada_first/:0:2","tags":null,"title":"草缸铁肥配方","uri":"/2022/04/my_ada_first/"},{"categories":["代码","糖尿病"],"content":"DiaBox 过期了 diaBox 软件IOS版本过期了,没法子。官方说暂时没有办法，已经把代码开源了，只能自己编译。没搞过ios开发的只能硬着头皮做了。 拉取完 代码 https://github.com/bubbledevteam/bubble-client-swift.git 。头有点大Readme 里面是空的，xcode 也不熟悉，xcode 也不熟悉，后运行编译直接就报异常了： import LoopKit // No such module 'LoopKit' 看样子应该是三分库引入问题。但是这个库怎么引入呢。查看一下代码目录： ./ ├── BubbleClient ├── BubbleClient.xcodeproj ├── BubbleClientPlugin ├── BubbleClientTests ├── BubbleClientUI ├── Cartfile ├── Cartfile.resolved ├── Carthage ├── Common ├── CoreData ├── LICENSE ├── LibreSensor ├── New\\ Group ├── README.md ├── Scripts ├── bin ├── singleviewtesterapp └── tmp.xcconfig 搜索一下关键字 Cartfile。果然，这个就是三方模块导入的方式。学习了半天以后，原来要先按照编译 具体参考 https://www.jianshu.com/p/f33972b08648 和 https://www.cnblogs.com/strengthen/p/14084080.html 两篇文章 但是还是根据提示还是出现错误 A shell task (/usr/bin/xcrun lipo -create /Users/chinaddos/Library/Caches/org.carthage.CarthageKit/DerivedData/13.2_13C90/SwiftCharts/0.6.5/Build/Intermediates.noindex/ArchiveIntermediates/SwiftCharts/IntermediateBuildFilesPath/UninstalledProducts/iphoneos/SwiftCharts.framework/SwiftCharts /Users/chinaddos/Library/Caches/org.carthage.CarthageKit/DerivedData/13.2_13C90/SwiftCharts/0.6.5/Build/Products/Release-iphonesimulator/SwiftCharts.framework/SwiftCharts -output /Users/chinaddos/Workspace/yudi/bubble-client-swift/Carthage/Build/iOS/SwiftCharts.framework/SwiftCharts) failed with exit code 1: fatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: /Users/chinaddos/Library/Caches/org.carthage.CarthageKit/DerivedData/13.2_13C90/SwiftCharts/0.6.5/Build/Intermediates.noindex/ArchiveIntermediates/SwiftCharts/IntermediateBuildFilesPath/UninstalledProducts/iphoneos/SwiftCharts.framework/SwiftCharts and /Users/chinaddos/Library/Caches/org.carthage.CarthageKit/DerivedData/13.2_13C90/SwiftCharts/0.6.5/Build/Products/Release-iphonesimulator/SwiftCharts.framework/SwiftCharts have the same architectures (arm64) and can't be in the same fat output file Building universal frameworks with common architectures is not possible. The device and simulator slices for \"SwiftCharts\" both build for: arm64 Rebuild with --use-xcframeworks to create an xcframework bundle instead. 或者 youzi@you-iMac bubble-client-swift % bash Scripts/carthage.sh update --platform iOS *** Fetching LoopKit *** Fetching CGMBLEKit *** Fetching SwiftCharts *** Fetching dexcom-share-client-swift *** Checking out LoopKit at \"acd1212467ff7f7a3da6ff695f83764bbd0779a4\" *** Checking out SwiftCharts at \"0.6.5\" *** Checking out dexcom-share-client-swift at \"e3eb1b2baee97d95144c3f3f40c77ded42226604\" *** Checking out CGMBLEKit at \"f8dd4bc3f025c0bd8964f36f7780fb7c4b756ecd\" *** xcodebuild output can be found in /var/folders/hf/862jyd094kz346scvjtkvv1r0000gn/T/carthage-xcodebuild.iQNWpz.log *** Building scheme \"SwiftCharts\" in SwiftCharts.xcodeproj Build Failed Task failed with exit code 1: /usr/bin/xcrun lipo -create /Users/youzi/Library/Caches/org.carthage.CarthageKit/DerivedData/13.2_13C90/SwiftCharts/0.6.5/Build/Intermediates.noindex/ArchiveIntermediates/SwiftCharts/IntermediateBuildFilesPath/UninstalledProducts/iphoneos/SwiftCharts.framework/SwiftCharts /Users/youzi/Library/Caches/org.carthage.CarthageKit/DerivedData/13.2_13C90/SwiftCharts/0.6.5/Build/Products/Release-iphonesimulator/SwiftCharts.framework/SwiftCharts -output /Users/youzi/Workspace/yudi/bubble-client-swift/Carthage/Build/iOS/SwiftCharts.framework/SwiftCharts This usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/hf/862jyd094kz346scvjtkvv1r0000gn/T/carthage-xcodebuild.iQNWpz.log 怎么回事，找一下github 上有人也遇到这个问题 因为我现在的是最新的XCode 13;原来的只支持XCode 12 ，血都吐干净了！！ chinaddos@liuyou-iMac bubble-client-swift % git diff Scripts/carthage.sh diff --git a/Scripts/carthage.sh b/Scripts/carthage.sh index 3492f3c..7342243 100755 -- a/Scripts/carthage.sh ++ b/Scripts/carthage.sh @@ -10,10 +10,10 @@ set -euo pipefail xcconfig=$(mktemp /tmp/static.xcconfig.XXXXXX) trap 'rm -f \"$xcconfig\"' INT TERM HUP E","date":"2021-12-16","objectID":"/2021/12/cgm_diabox/:0:0","tags":["xcode","diabox","cgm"],"title":"XCode 13 Loop依赖报错问题排除记录","uri":"/2021/12/cgm_diabox/"},{"categories":["活着","碎碎念"],"content":"01 又一年11 又是一年双十一，我开始没有理智的买了两个鱼竿，和一堆钓鱼的工具，鱼线，鱼漂，鱼护，座椅等。明知没有时间用这些东西就是忍不住。明知不该有这样的希望就是停不住幻想。多少人梦想自己是科学家，真正又有多少人能实现。不过即使没有实现，也不见得就会悲伤。因为呀，梦想都会时间淡化。我想，幻想也会。因此我先提前祭奠。 ","date":"2021-11-17","objectID":"/2021/11/guo_qing_zhi_hou_20211117/:0:1","tags":["随笔"],"title":"节后心境","uri":"/2021/11/guo_qing_zhi_hou_20211117/"},{"categories":["糖尿病"],"content":" 原文地址：Open Source Artificial Pancreases will become the new standard of care for Diabetes in 2019 我得一糖已经超过25年了。糖尿病真的让人很痛苦。靠着胰岛素获得延续几年生命幸运。糖尿病患者通常不会死于老年，而是死于心脏病或中风，肾脏衰竭，而在糖尿病发作时，他们可能会失明，神经受到损伤，截肢和其他一些疾病。它曾经是死刑，但是在1921年采用胰岛素作为一种治疗方法时，就有了一些新的机会。 如果你能做到使血糖保持在正常水平附近；如果你可以模拟不工作的胰腺，那么你就可能会更加幸运！（原文：you’ll get hit by an ice cream truck!）（至少，这就是我希望自己能做到的事。) 胰岛素治疗的发展最早的时候，是用大规格煮沸后的钢针注射一定剂量猪肉胰岛素，然后在棍子上撒尿以测量血糖水平。后来，每天测量十二根手指，并用注射器进行六十次手动射击。再过了一些年头，然后出现了连续的血糖仪（美敦力、德康、雅培等）和持续注入的胰岛素泵，尽管不是自动的，但意味着侵入性治疗更少，控制手段也更加丰富。 今天，我们即将实现闭环。什么是闭环？是这样的： 考虑我的葡萄糖水平，我要吃的东西以及我要吃的东西（以及许多其他环境因素） 给自己注射胰岛素 回到1.根据情况，每隔几个小时或每隔几分钟继续执行。 手动我已经做到了。每位糖尿病患者都这样做，带着压倒性的精神压力-包括各种背景因素在内的强烈心理压力。我们想降低糖尿病的认知负担。如果您不擅长数学，这可能是您让你无法长寿的疾病（字面上地。这不公平）。 社区正在通过允许算法为我做出一些决策来“闭环”。 我个人使用开放源人造胰腺已有两年多了。从那天开始的黑夜开始，我每天都用手指棒和六根针棒。它不是完美的，不是自动的，但是开源胰腺是“特斯拉糖尿病自动驾驶仪”。它并不总是将汽车停在正确的位置或在每个停车灯处停下，但是它很难使我保持在直线之间并一直向前行驶，而现在有了它，我无法想象没有它。 我整夜不眠，而Loop则每隔五分钟进行一些微调，以使糖分尽可能平整。我不认识你，但我的胰腺坐在我的床头柜上。 它正在发生并且无法停止 七年前，我写了2012年的《糖尿病技术的悲惨状态》。三年前，《 2016年糖尿病技术的有前途的状态》和去年《 2018年糖尿病技术的有前途的状态》。2012年第一篇博客文章中有一个很好的评论，霍华德·洛普（Howard Loop）分享了他对事物状态的沮丧。与Internet上的大多数评论员不同，霍华德惊奇地采取了行动，成立了Tidepool Organization！他7年前的评论中的所有事情都在发生。 很棒的文章，斯科特。 自从我12岁的女儿在9个月前被诊断出患有T1D以来，您已经准确地捕捉到了我的挫败感。 她还戴着泵和CGM，每三天勇敢地执行您在视频中展示的仪式。 这项技术太过复古了，令人尴尬。 现在是2019年，情况真的在好转。开源DIY糖尿病社区正在蓬勃发展。有数种开放式胰腺系统可供选择，OpenAPS和Loop / LoopKit不断创新。 OpenAPS在Raspberry Pi Zeros之类的设备上运行，是一个独立的胰腺，在主设备上都具有通信和大脑/算法。 Loop运行在iPhone上，并使用“ RileyLink”设备将RF（射频）胰岛素泵通信与现代蓝牙进行桥接。 第一个不好的部分是我正在使用我在Craigslist上购买的15年保修保修破裂的胰岛素泵。大多数新泵都被锁定，而我的旧泵是支持远程控制的最新版本。但是，Loop开源项目宣布本周将支持第二台泵OmniPod Eros。这是首次支持“保修期内”的泵，这也证明了糖尿病社区提出的更大的观点。我们不等。我们想要开放的选择，开放的数据和开放的选择，使我们能够掌控一切。 阅读有关原始开发人员Nate Racklyeft的Loop的历史。正如他指出的那样，Loop或OpenAPS之类的东西是无数社区成员一千个小步骤和创新的结果，他们对时间如此慷慨。 运行它的第一个系统是Raspberry Pi。代码是一系列 的 插件，用的帮助书面克里斯Hannemann的，到openaps工具包所开发奔西中合作与达纳·刘易斯和斯科特Leibrand。我仍然对Ben设计中的优雅前提感到敬畏：可重复，可记录和可扩展的转换命令系统，均由Git支持。该工具箱的核心插件是decocare：Ben的5年大瓶装作品，是Minimed Carelink USB无线电的反向工程协议，用于命令胰岛素泵。 有一个惊人的写了皮特Schwamb，谁在环全职工作的社区的核心成员之一，现在，在软件定义无线电如何让社区“嗅”胰岛素的通信协议泵在RF频谱反转为Medtronic和现在的Omnipod Eros胰岛素泵设计通讯。这是一本引人入胜的书，确实说明了您如何需要合适的人选和良好的事业，并且您可以做任何事情。 您可以观看我的视频演示“用开放源代码的人工胰腺解决糖尿病”，其中概述了该问题，一年中提供了多种解决方案以及两个以LoopKit和OpenAPS形式出现的开放源性胰腺选项。 潮汐池（Tidepool）和Nightscout基金会等社区成员和组织正在与FDA合作，以实施诸如开源胰腺系统之类的项目和概念，从基于多年挫折的威胁到基于相互合作的美好未来！ 2018年3月，FDA宣布了从头iCGM（集成CGM）的称号。从头命名是FDA创建新设备分类的过程，在这种情况下，将合格的CGM从FDA风险最高的III类转移到具有特殊控制的II类。第一个获得此称号的CGM是Dexcom G6。 糖尿病Xbox头像这是什么意思？这意味着FDA愿意以一种正式的方式对连续式血糖仪进行分类，从而为可互操作的设备铺平了道路。如今，我们通过使用超出保修期限的泵来入侵设备来构建这些回路。我们完全依靠自己来做到这一点。收集所需的设备，在灰色的市场上购买老式的泵，自己编译软件可能需要几个月的时间，这对于非技术人员来说是一个巨大的障碍。 想象一个未来，有人可以购买受支持且保修期内的“ iPump”，下载受官方支持的应用或程序包，然后开始循环播放！我们可能拥有开放和可互操作的设备以及可交换算法的世界。 2018年10月，非营利性Tidepool组织宣布了其打算在Apple App Store中提供Loop应用程序作为受支持且受FDA监管的移动应用程序的意图！发生这种情况的人，但是我们才刚刚开始。 要了解更多信息，请开始阅读。 循环-https: //loopkit.github.io/loopdocs/ OpenAPS- https: //openaps.org/ Tidepool - https://www.tidepool.org/ 另外，如果您患有糖尿病，可以考虑购买Nightscout Xbox Avatar配件，以便在游戏时能看到自己的身影！ ","date":"2021-04-13","objectID":"/diabetes/open-source-artificial-pancreases-will-become-the-new-standard-of-care-for-diabetes-in-2019/:0:0","tags":["糖","翻译"],"title":"开源人工胰腺病将在2019年成为糖尿病的新护理标准[翻译]","uri":"/diabetes/open-source-artificial-pancreases-will-become-the-new-standard-of-care-for-diabetes-in-2019/"},{"categories":["代码"],"content":" 当前说明文档基于cert-manager Documentation v1.2 ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:0","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"1. 安装 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.2.0/cert-manager.yaml ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:1","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"2. 配置颁发证书机构 这里仅仅说明ACME配置HTTP01 方式, DNS01是采用添加DNS txt记录方式 apiVersion:cert-manager.io/v1kind:ClusterIssuermetadata:name:letsencrypt-prodspec:acme:# You must replace this email address with your own.# Let's Encrypt will use this to contact you about expiring# certificates, and issues related to your account.email:support@example.com#填写相关的邮箱地址server:https://acme-v02.api.letsencrypt.org/directoryprivateKeySecretRef:# Secret resource that will be used to store the account's private key.name:letsencrypt-issuer-example-key # Add a single challenge solver, HTTP01 using nginxsolvers:- http01:ingress:class:edge-nginx#这里根据自身k8s选择正确的 ingress class ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:2","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"3. 使用 步骤 配置服务（k8s service) 配置外部域名解析配置到ingress 边缘节点。 此例子中ingress class 为 edge-nginx 配置ingress 示例 apiVersion:networking.k8s.io/v1kind:Ingressmetadata:annotations:# add an annotation indicating the issuer to use. # 这里的名字必须跟第二节中配置的颁发者名对上cert-manager.io/cluster-issuer:letsencrypt-prodname:myIngressnamespace:myIngressspec:rules:- host:dev.example.comhttp:paths:- backend:serviceName:myserviceservicePort:80path:/tls:# \u003c placing a host in the TLS config will indicate a certificate should be created- hosts:- dev.example.comsecretName:myingress-cert# \u003c cert-manager will store the created certificate in this secret. 一 查看证书颁发情况 [root@mylinux ~]# kubectl describe certificate dev-example-tls -n example Name: dev-example-tls Namespace: example Labels: app=example-web-ingress Annotations: \u003cnone\u003e API Version: cert-manager.io/v1 Kind: Certificate ... Spec: Dns Names: dev.example.com Issuer Ref: Group: cert-manager.io Kind: ClusterIssuer Name: letsencrypt-prod Secret Name: dev-example-tls Usages: digital signature key encipherment Status: Conditions: Last Transition Time: 2021-03-31T02:31:52Z Message: Certificate is up to date and has not expired Reason: Ready Status: True Type: Ready Not After: 2021-06-29T01:32:25Z Not Before: 2021-03-31T01:32:25Z Renewal Time: 2021-05-30T01:32:25Z Revision: 1 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Issuing \u003cinvalid\u003e cert-manager Issuing certificate as Secret was previously issued by ClusterIssuer.cert-manager.io/letsencrypt-staging Normal Reused \u003cinvalid\u003e cert-manager Reusing private key stored in existing Secret resource \"dev-example-tls\" Normal Requested \u003cinvalid\u003e cert-manager Created new CertificateRequest resource \"dev-example-tls-kq2pn\" Normal Issuing \u003cinvalid\u003e cert-manager The certificate has been successfully issued [root@mylinux ~]# ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:3","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"问题 证书颁发异常，报错如下 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Issuing \u003cinvalid\u003e cert-manager Issuing certificate as Secret does not exist Normal Generated \u003cinvalid\u003e cert-manager Stored new private key in temporary Secret resource \"dev-example-tls-z2pbs\" Normal Requested \u003cinvalid\u003e cert-manager Created new CertificateRequest resource \"dev-example-tls-jgz6j\" Warning Failed \u003cinvalid\u003e cert-manager The certificate request has failed to complete and will be retried: Failed to wait for order resource \"dev-example-tls-jgz6j-684099693\" to become ready: order is in \"invalid\" state: 此问题由于外部解析没有异常导致，在颁发证书时需要DNS解析可以解析到当前的边界节点，acme会发起http请求校验。 ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:4","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"其他可能用到的命令 kubectl describe ingress -n example #查看ingress 状态 ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:5","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"参考 https://cert-manager.io/docs/installation/kubernetes/ ","date":"2021-03-31","objectID":"/2021/03/k8s_https_with_cert_manager/:0:6","tags":["k8s","https"],"title":"k8s https证书管理（cert-manager）","uri":"/2021/03/k8s_https_with_cert_manager/"},{"categories":["代码"],"content":"以webapi为例，webapi 是web后台接口。负责任务的增删改查、将任务分发到真实运行的节点、提供统计查询和相关告警信息查询。如下是打包以后可运行的安装包目录 [root@localhost webapi-0.1.1]$ tree -a . ├── bin #可执行文件bin目录 │ └── webapi ├── conf #配置目录 │ └── conf.yml ├── docker-entrypoint.sh #docker entrypoint ├── Dockerfile ├── .dockerignore #忽略文件声明 (忽略安装脚本，更新脚本，Dockerfile) ├── install.sh #非docker版本 安装脚本 ├── ssl #自带证书 │ ├── key.crt │ └── tls.crt └── update.sh #非docker版本 更新脚本 其中Dockerfile 内容如下： debian 版本 FROMdebian:buster-slimLABEL author=\"tjuliuyou@gmail.com\" \\ description=\"my web api app\"# 注意使用 .dockerignore 忽略其他文件ADD ./ / ENV CONFIG_FILE=/conf/conf.ymlENV LOG_LEVEL=INFO ENV VERBOSE=2 EXPOSE80ENTRYPOINT [\"/docker-entrypoint.sh\"]CMD [\"webapi\"] alpine 版本 FROMalpine:3.10LABEL author=\"tjuliuyou@gmail.com\" \\ description=\"my web api app\"# 注意使用 .dockerignore 忽略其他文件ADD ./ / ENV CONFIG_FILE=/conf/conf.ymlENV LOG_LEVEL=INFO ENV VERBOSE=2 EXPOSE80ENTRYPOINT [\"/docker-entrypoint.sh\"]CMD [\"webapi\"] 其中 docker-entrypoint.sh文件如下： #!/usr/bin/env bash # # Created by tjuliuyou on 21/02/25. # set -e # if command starts with an option, prepend webapi if [ \"${1:0:1}\" = '-' ]; then set -- webapi \"$@\" fi # cd workspace # if command webapi only, add use default args if [ \"$1\" = 'webapi' ] \u0026\u0026 [ \"$#\" -eq 1 ]; then exec webapi -conf ${CONFIG_FILE} -log_level ${LOG_LEVEL} -verbose ${VERBOSE} -logtostderr true fi exec \"$@\" k8s 部署实例(关键部分) #...template:metadata:labels:app:webapispec:volumes:- name:secret-volumesecret:secretName:app-tls- name:conf-volumeconfigMap:name:webapi-configaffinity:nodeAffinity:requiredDuringSchedulingIgnoredDuringExecution:nodeSelectorTerms:- matchExpressions:- key:kubernetes.io/hostnameoperator:Invalues:- node1.skynetcloud.com containers:- name:webapiimage:webapi:latestports:- containerPort:80volumeMounts:- name:secret-volumemountPath:/ssl- name:conf-volumemountPath:/conf/conf.ymlsubPath:conf.ymlenv:- name:VERBOSEvalue:2 alpine 版本需要添加额外DNS选项 template:metadata:labels:app:webapispec:volumes:- name:secret-volumesecret:secretName:app-tlscontainers:- name:webapiimage:webapi:latestports:- containerPort:80volumeMounts:- name:conf-volumemountPath:/conf/conf.ymlsubPath:conf.ymlenv:- name:VERBOSEvalue:2dnsConfig:options:- name:ndotsvalue:\"2\" 解释：域名中不大于两个点将会从搜索域中搜索该域名解析，这种写法对于主域名可能还是会存在问题 举例而言：例如（magic.ac.cn) magic.ac.cn -\u003e 异常解析 www.magic.ac.cn -\u003e 正常解析 参考 kubernetes容器中域名解析优化 ","date":"2021-02-25","objectID":"/2021/02/docker_demo/:0:0","tags":["k8s","docker"],"title":"编译docker实例","uri":"/2021/02/docker_demo/"},{"categories":["代码"],"content":"FAQ 1. ENTRYPOINT 与 CMD 使用？ ENTRYPOINT不会被直接覆盖：使用场景为入口点；CMD 可以被覆盖：使用场景一般填写入口参数。具体而已参考上一节webapi实例 当不输入任何参数时，使用默认参数相当于运行 bash /docker-entrypoint.sh webapi [root@localhost webapi]$ docker run -it webapi:0.1.1 I1028-15:48:25.878 main.go:43] 当前WebAPI版本: 0.1.1 I1028-15:48:25.878 main.go:44] Git Commit Hash : 115827ab9e8696e141d58b47f7170f21f932f08d I1028-15:48:25.878 main.go:45] UTC Build Time : 2021-02-25_07:15:12上午 ... 可以\u0008通过-e 传递环境变量 如：docker run -it -e CONFIG_FILE=/app/config.yaml webapi:0.9.2-643 当输入--help参数时，使用附带参数，相当于运行 bash /docker-entrypoint.sh webapi --help [root@localhost webapi]$ docker run -it webapi:0.1.1 --help Usage of webapi: -conf string The configure file (default \"conf.yml\") -log_dir string If non-empty, write log files in this directory -log_level value logs at or above this threshold go to stderr -logtostderr log to standard error instead of files -pprof string [localhost:6060]start debug page. -verbose value log level for V logs -version show build version. failed to resize tty, using default size ... 当输入bash参数时，使用附带参数，相当于运行 bash /docker-entrypoint.sh bash [root@localhost webapi]$ docker run -it webapi:0.1.1 bash root@09b00aa0f1bc:/# ls bin boot conf dev docker-entrypoint.sh etc home lib lib64 media mnt opt proc root run sbin srv ssl sys tmp usr var root@09b00aa0f1bc:/# exit 2. 为什么使用 debian:buster-slim 替换 alpine 优点: Alpine Linux 使用了 musl，可能和其他 Linux 发行版使用的 glibc 实现会有所不同。在容器化中最可能遇到的是 DNS 问题，即 musl 实现的 DNS 服务不会使用 resolv.conf 文件中的 search 和 domain 两个配置，这对于一些通过 DNS 来进行服务发现的框架可能会遇到问题 debian:buster-slim编译脚本如下：添加了默认UTC+8时区配置；添加了智为默认RootCA证书 FROMdebian:buster-slimLABEL author=\"tjuliuyou@gmail.com\" \\ version=\"1.0.0\" \\ description=\"my k8s base container\"COPY sources.list /etc/apt/sources.listRUN apt-get update \u0026\u0026 \\ apt-get install -y ca-certificates \u0026\u0026 \\ rm -rf /var/lib/apt/lists/* \u0026\u0026 \\ update-ca-certificates \u0026\u0026 \\ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeCMD [\"/bin/bash\"] 缺点： 体积变大 5M -\u003e50M ","date":"2021-02-25","objectID":"/2021/02/docker_demo/:0:1","tags":["k8s","docker"],"title":"编译docker实例","uri":"/2021/02/docker_demo/"},{"categories":["活着","碎碎念"],"content":"01 假期就这样完结，没有回乡。2020年过得不尽人意，自己割了烂尾，老婆孩子每人都肺炎住院超过一周。本来打算去一趟衡阳拜佛「虽然自己不信这些，但是给家人未来会变好的仪式感还是很重要的」，但是因为疫情「就地过年」居然限制要在长沙地区，而且据说风景区也关门了。最后，也只是在附近公园溜达了一整个假期。对于两个孩子奴来说，干瘪的生活被两个女儿挤得满满当当的，某种意义上说也是中幸福。总有说没有年味了。我觉得更多还是自己过了那个年纪。每个年纪应该做这个年纪该做的事情。至少家了的小孩是很期待过年的。我们总要给她们创造属于他们的年味记忆。 ","date":"2021-02-18","objectID":"/2021/02/first_workday_of_2021/:0:1","tags":["随笔"],"title":"开工","uri":"/2021/02/first_workday_of_2021/"},{"categories":["活着","碎碎念"],"content":"02 今天是农历新年第一天上班，实习的小妹子发微信说要去考公务员。我很早就看到了，但是一直没有答复。因为不知道该怎么去答复。似乎每次新年一过人员总是不那么稳定。年前信誓旦旦的说要一起去看星辰大海。走着走着就可能嫌弃小船太慢了。小公司真的是很难。虽说原因是可能是自身竞争力不够。对我来说的结果就是心情比较难受，接下来的工作也会比较难受。都说要团队作战，没有稳定的核心团队又能做什么呢？ ","date":"2021-02-18","objectID":"/2021/02/first_workday_of_2021/:0:2","tags":["随笔"],"title":"开工","uri":"/2021/02/first_workday_of_2021/"},{"categories":["活着","碎碎念"],"content":"03 生活不易，有时候，都不知道要怎样面对这层层荆棘。不过，感谢上苍把两个女儿带到我的身边，用她们的童真卸下一整天的疲惫。 ","date":"2021-02-18","objectID":"/2021/02/first_workday_of_2021/:0:3","tags":["随笔"],"title":"开工","uri":"/2021/02/first_workday_of_2021/"},{"categories":["活着"],"content":"01 最近一家公司一家入职超过四年了，突然觉得很没意思。和工作相关，却也无关。相关的是已经尽力做到最好，却也是忙碌到平庸到重复日子。无关又是因为这种状态不仅仅是因为工作所带来的。更多的是生活带来的无力感。不管作出怎样的努力，总是跳不出自己的纬度与认知，自然也就没法跟进一步的突破自身的周遭走到另外一个台阶（包括自身能力抑或是金钱）。 ","date":"2021-01-29","objectID":"/2021/01/key_of_life/:0:1","tags":["随笔"],"title":"Key Of Life","uri":"/2021/01/key_of_life/"},{"categories":["活着"],"content":"02 前些日子看了一个电影堺雅人主演的《盗钥匙的方法》。其实这个翻译名有点怪，英文名《key of life》更加贴合电影表达的内容。电影讲述的是两个不同性格（生活习惯/态度）的人互换身份以后荒诞的经历的故事。对消极的人来说摇摇欲坠甚至自杀的生活残局，搁到积极的人手上，仍然可以梳理得平顺，修缮得完整，重新走向正轨。里面有一段台词让人印象深刻： 你房间里那本斯特拉斯伯格的书 只看了前面的8页 其它书也是一样 好不容易稍微有点学习的干劲了 可是书一买回来就满足了 你小子就是那种最渣的人 ","date":"2021-01-29","objectID":"/2021/01/key_of_life/:0:2","tags":["随笔"],"title":"Key Of Life","uri":"/2021/01/key_of_life/"},{"categories":["活着"],"content":"03 所以，我想表达什么呢？Key of life 是什么？个人认为还是自律和好的习惯。习惯决定了自身发展的方向。如果说好的习惯可以让自己向上突破。那这种“复利”效应会随着时间累积成优势最终突破自身的纬度，达到下一个等级。相反差的习惯是向下“复利”的。即使起点很高，或者偶尔的好运（机遇）来啦。最终总是会走向本来的自己。这和一段名言其实也是契合： 你永远赚不到超出你认知范围外的钱 除非你靠运气 但靠运气赚到的钱，最后往往又会靠实力亏掉 这是一种必然 你所赚的每一分钱 都是你对这个世界认知的变现 你所亏的每一分钱 都是因为对这个世界认知有缺陷 这个世界最大的公平在于 当一个人的财富大于自己认知的时候 这个社会有100种方法收割你 直到你的认知和财富相匹配为止 自己的停步不前和自己的习惯是相关的。控制不了自己刷一些垃圾知乎文章，看一些无聊的笑话；每天工作没有花10分钟总结和反思；做决定凭直觉而非理性分析判断；没有定期的运动与健身等等这些都是让我止步不前的习惯。So： 这就是2021年应该作出的改变吧 ","date":"2021-01-29","objectID":"/2021/01/key_of_life/:0:3","tags":["随笔"],"title":"Key Of Life","uri":"/2021/01/key_of_life/"},{"categories":null,"content":"时隔5年再次捡起自己的网站，但还是希望自己能挤出时间锻炼一下书写博客，文档的能力。 ","date":"2021-01-25","objectID":"/2021/01/first/:0:0","tags":null,"title":"Bring My Own Candy","uri":"/2021/01/first/"},{"categories":null,"content":"个人简介 小小程序员一枚。11年毕业于天津大学。(TODO) ","date":"2021-01-25","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于本站 关于晨熙 晨/熙是我两个女儿的名字，紧巴的日子里，她们是我成长的动力源泉。希望她们能永远健康快乐。 版权说明 本站采用更开放的「署名 4.0 国际（CC BY 4.0）」创作共享协议。通俗地讲，只要在使用时署名，那么使用者可以对本站所有原创内容进行转载、节选、混编、二次创作，允许商业性使用。 ","date":"2021-01-25","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":["活着","碎碎念"],"content":"来不及写下什么，只为这异常忙碌的一天。 只是，有时候总要为自己提个醒： U27 ，继续跑，带着赤子的骄傲！ 就这样。 ","date":"2014-05-18","objectID":"/2014/05/longlongtimeago_2011/:0:0","tags":["随笔"],"title":"U27","uri":"/2014/05/longlongtimeago_2011/"},{"categories":["活着","碎碎念"],"content":"U26 周瑜26岁，已经是建威中郎将，自此称周郎； 诸葛亮26岁，刚刚忽悠完刘备，准备出山参加工作； 爱因斯坦26岁, 提出狭义相对论,奠定了现代物理学基础; 麦克斯韦26岁，将数学带入电磁学领域,由此导致麦克斯韦电磁理论的诞生； 丁磊26岁，刚刚创办网易，并开始为之奋斗； 马化腾26岁，在一个科技公司当程序员，一年之后他将辞职创办腾讯公司； U26: 为什么会要来北京呢, 因为环境好,机会多,想找寻志同道合的人么? 那么, 环境好么? 否!机会多么?否! 志同道合有么? 否! 两年, 没换过工作,没换过发型,没学会奉承; t恤,平板鞋,学院风的脸. 有些伤感,却没有泄气的情绪. 给别人带来悲观沉溺的斑驳印象之外，总应该留下别的什么？ 曾经情绪失控到极点差点儿划伤自己后, 彻底看清了一些自私,明白了很多的事. 再不为倔强而困惑,不因低微而菲薄.只是 更多的时候是这样,若没走出去,便以为这就是整个世界! 所以,即使争强好胜并带不来答案, 坚守了自己，赤子之心笑对生活所遇见，就足够了！ 如别人日志所说: 也许有一天我会放弃,面对那注定的一败,但也不会像那些自以为看透了的人那样 等到自己子孙后辈面临类似境遇时,傻逼兮兮的讽刺他们说: “别傻了,爱情这东西….理想这东西就是….” 我会对他们说: 老爸当年也等过,但是比较没种,没有坚持到底, 就向这个世界缴械了. 希望你比老爸有出息! 引用一句 王勃26岁挥毫写下的名句: 老当益壮,宁移白首之心?穷且益坚,不坠青云之志! 致U26,勉之! 2013-5-29 ","date":"2014-05-18","objectID":"/2014/05/longlongtimeago_2011/:0:1","tags":["随笔"],"title":"U27","uri":"/2014/05/longlongtimeago_2011/"},{"categories":["活着","碎碎念"],"content":"U25 10年十月的一晚，刚刚下完场雨的天津开始转凉，小M和我还在围着学校的二环气喘吁吁地转圈。当然这并不是在锻炼身体，对於班裡两个找工作的主力来说，忘带简歷是很腿疼的事情。当时对那家公司也没有多少爱慕之情，可即便如此，面对简歷又一次的石沉大海后还是颇受打击。然而世界真是瞬息万变，前些日子却偶然的发现那家公司已经深陷解约门。我应该是要庆幸还是敬畏呢？试问还有什麼可以可怕过命运的玩笑。今日种种不顺快，天晓得几年之后是不是又要感激涕零。 相当长的一段时间很消沉，身在其中的我也没能注意到负面的这种情绪是如此容易沉溺并感染他人。直到有一天有人拿走我心爱的车，心爱的手机，否定我对於感情最為纯真的态度。恍惚间明白，我们不能对伤害你的人束手无策之后却跟关心你的人无限度的耍无赖。伤害你的人是不可能跑过来安慰你的，生活中的不如意需要自己扛着。每一次都挺过去之后心灵之壁才会一点一点坚强。最近思考了很多，比如友，比如爱，比如将来。这些或许会是接下来的日子裡比较在意的东西。 2012-5-10 ","date":"2014-05-18","objectID":"/2014/05/longlongtimeago_2011/:0:2","tags":["随笔"],"title":"U27","uri":"/2014/05/longlongtimeago_2011/"}]